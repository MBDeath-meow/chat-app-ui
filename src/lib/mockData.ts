import { Server, User, Message, DirectMessage, AppState } from './types';

const avatarUrls = [
  'https://api.dicebear.com/7.x/avataaars/svg?seed=1',
  'https://api.dicebear.com/7.x/avataaars/svg?seed=2',
  'https://api.dicebear.com/7.x/avataaars/svg?seed=3',
  'https://api.dicebear.com/7.x/avataaars/svg?seed=4',
  'https://api.dicebear.com/7.x/avataaars/svg?seed=5',
  'https://api.dicebear.com/7.x/avataaars/svg?seed=6',
  'https://api.dicebear.com/7.x/avataaars/svg?seed=7',
  'https://api.dicebear.com/7.x/avataaars/svg?seed=8',
];

const russianNames = [
  '–ê–ª–µ–∫—Å–µ–π_dev', '–ú–∞—Ä–∏—è_UI', '–î–º–∏—Ç—Ä–∏–π_code', '–ï–ª–µ–Ω–∞_design', '–ê–Ω–¥—Ä–µ–π_tech',
  '–°–≤–µ—Ç–ª–∞–Ω–∞_art', '–ò–≥–æ—Ä—å_games', '–ù–∞—Ç–∞–ª—å—è_music', '–í–ª–∞–¥–∏–º–∏—Ä_photo', '–ò—Ä–∏–Ω–∞_video',
  '–°–µ—Ä–≥–µ–π_stream', '–Æ–ª–∏—è_draw', '–ê–ª–µ–∫—Å–∞–Ω–¥—Ä_code', '–ï–∫–∞—Ç–µ—Ä–∏–Ω–∞_ui', '–ú–∏—Ö–∞–∏–ª_dev',
  '–û–ª—å–≥–∞_design', '–ü–∞–≤–µ–ª_tech', '–ê–Ω–Ω–∞_creative', '–†–æ–º–∞–Ω_gaming', '–í–∏–∫—Ç–æ—Ä–∏—è_art',
  '–ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏–Ω_dev', '–õ—é–±–æ–≤—å_design', '–ú–∞–∫—Å–∏–º_stream', '–¢–∞—Ç—å—è–Ω–∞_music', '–í–∞–ª–µ—Ä–∏–π_photo'
];

const channelNames = {
  general: ['–æ–±—â–∏–π', '–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ', '–æ–±—ä—è–≤–ª–µ–Ω–∏—è', '–ø—Ä–∞–≤–∏–ª–∞', '–Ω–æ–≤–æ—Å—Ç–∏'],
  dev: ['—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞', '–∫–æ–¥-—Ä–µ–≤—å—é', '–±–∞–≥–∏', '—Ñ–∏—á–∏', '—Ä–µ–ª–∏–∑—ã', '—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ'],
  design: ['–¥–∏–∑–∞–π–Ω', 'ui-kit', '–º–∞–∫–µ—Ç—ã', '–∏–∫–æ–Ω–∫–∏', '—Ç–∏–ø–æ–≥—Ä–∞—Ñ–∏–∫–∞'],
  random: ['—Å–ª—É—á–∞–π–Ω–æ–µ', '–º–µ–º—ã', '—Ñ–ª—É–¥', '–æ—Ñ—Ñ—Ç–æ–ø', '—é–º–æ—Ä'],
  voice: ['–æ–±—â–µ–Ω–∏–µ', '—Å–æ–∑–≤–æ–Ω—ã', '—Å—Ç—Ä–∏–º—ã', '–∏–≥—Ä—ã', '–º—É–∑—ã–∫–∞']
};

const messageTemplates = [
  '–ü—Ä–∏–≤–µ—Ç –≤—Å–µ–º! –ö–∞–∫ –¥–µ–ª–∞?',
  '–ö—Ç–æ-–Ω–∏–±—É–¥—å –º–æ–∂–µ—Ç –ø–æ–º–æ—á—å —Å —ç—Ç–æ–π –∑–∞–¥–∞—á–µ–π?',
  '–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞ –Ω–∞–¥ –ø–æ—Å–ª–µ–¥–Ω–∏–º —Ä–µ–ª–∏–∑–æ–º!',
  '–ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø—Ä–æ –≤—Å—Ç—Ä–µ—á—É –≤ 15:00',
  '–ù–∞—à–µ–ª –∏–Ω—Ç–µ—Ä–µ—Å–Ω—É—é —Å—Ç–∞—Ç—å—é, –¥–µ–ª—é—Å—å —Å—Å—ã–ª–∫–æ–π',
  '–ö–æ—Ñ–µ-–±—Ä–µ–π–∫ —á–µ—Ä–µ–∑ 10 –º–∏–Ω—É—Ç, –∫—Ç–æ —Å –Ω–∞–º–∏?',
  '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –º–æ–π PR',
  '–ó–∞–≤—Ç—Ä–∞ –ø–ª–∞–Ω–∏—Ä—É–µ–º –¥–µ–º–æ –Ω–æ–≤–æ–π —Ñ–∏—á–∏',
  '–ö—Ç–æ –∏–≥—Ä–∞–ª –≤ –Ω–æ–≤—É—é –∏–≥—Ä—É? –í–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è?',
  '–•–æ—Ä–æ—à–∏–µ –≤—ã—Ö–æ–¥–Ω—ã–µ! –î–æ –≤—Å—Ç—Ä–µ—á–∏ –≤ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫',
  '–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å —Å –¥–∏–∑–∞–π–Ω–æ–º –∫–Ω–æ–ø–∫–∏',
  '–ö–æ–¥ –≤—ã–≥–ª—è–¥–∏—Ç –æ—Ç–ª–∏—á–Ω–æ, –æ–¥–æ–±—Ä—è—é!',
  '–ù–µ –º–æ–≥—É –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É, —É –∫–æ–≥–æ-—Ç–æ —Ç–∞–∫–∞—è –∂–µ –ø—Ä–æ–±–ª–µ–º–∞?',
  '–ó–∞–≤–µ—Ä—à–∏–ª–∏ —Å–ø—Ä–∏–Ω—Ç –¥–æ—Å—Ä–æ—á–Ω–æ, –æ—Ç–ª–∏—á–Ω–æ!',
  '–ö—Ç–æ-—Ç–æ –≤–∏–¥–µ–ª –Ω–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ?',
  'üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é —Å —É—Å–ø–µ—à–Ω—ã–º —Ä–µ–ª–∏–∑–æ–º!',
  '–î–µ–ª—é—Å—å —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–∞',
  '–í–æ–ø—Ä–æ—Å –ø–æ API, –º–æ–∂–µ–º –æ–±—Å—É–¥–∏—Ç—å?',
  '–ü–ª–∞–Ω–∏—Ä—É–µ–º —Ö–∞–∫–∞—Ç–æ–Ω –Ω–∞ —Å–ª–µ–¥—É—é—â–∏—Ö –≤—ã—Ö–æ–¥–Ω—ã—Ö',
  '–ö—Ç–æ —Ö–æ—á–µ—Ç –ø–æ—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞–¥ pet-–ø—Ä–æ–µ–∫—Ç–æ–º?'
];

function generateId(): string {
  return Math.random().toString(36).substr(2, 9);
}

function randomChoice<T>(array: T[]): T {
  return array[Math.floor(Math.random() * array.length)];
}

function generateUsers(count: number): User[] {
  return Array.from({ length: count }, (_, i) => ({
    id: generateId(),
    username: russianNames[i % russianNames.length],
    displayName: russianNames[i % russianNames.length].split('_')[0],
    avatar: avatarUrls[i % avatarUrls.length],
    status: randomChoice(['online', 'idle', 'dnd', 'offline'] as const),
    joinedAt: new Date(Date.now() - Math.random() * 365 * 24 * 60 * 60 * 1000).toISOString(),
  }));
}

function generateMessages(channelId: string, users: User[], count: number = 25): Message[] {
  return Array.from({ length: count }, (_, i) => {
    const author = randomChoice(users);
    const timestamp = new Date(Date.now() - (count - i) * 60000 + Math.random() * 30000);
    
    return {
      id: generateId(),
      content: randomChoice(messageTemplates),
      authorId: author.id,
      channelId,
      timestamp: timestamp.toISOString(),
      type: 'default' as const,
      reactions: Math.random() > 0.7 ? [
        {
          emoji: randomChoice(['üëç', '‚ù§Ô∏è', 'üòÑ', 'üéâ', 'üëÄ']),
          count: Math.floor(Math.random() * 5) + 1,
          users: [randomChoice(users).id]
        }
      ] : [],
      pinned: Math.random() > 0.9
    };
  });
}

export function generateMockData(): Pick<AppState, 'currentUser' | 'servers' | 'friends' | 'directMessages' | 'messages'> {
  const users = generateUsers(25);
  const currentUser = users[0];
  
  const servers: Server[] = [
    {
      id: generateId(),
      name: 'React –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏',
      icon: '‚öõÔ∏è',
      ownerId: users[1].id,
      memberCount: 15,
      members: users.slice(0, 15),
      roles: [
        { id: generateId(), name: '–ê–¥–º–∏–Ω', color: '#ff0000', permissions: ['admin'] },
        { id: generateId(), name: '–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä', color: '#00ff00', permissions: ['moderate'] },
        { id: generateId(), name: '–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫', color: '#0000ff', permissions: ['developer'] }
      ],
      categories: [
        {
          id: generateId(),
          name: '–ò–ù–§–û–†–ú–ê–¶–ò–Ø',
          channels: [
            { id: generateId(), name: '–æ–±—ä—è–≤–ª–µ–Ω–∏—è', type: 'text', position: 0, unreadCount: 2 },
            { id: generateId(), name: '–ø—Ä–∞–≤–∏–ª–∞', type: 'text', position: 1 },
            { id: generateId(), name: '–Ω–æ–≤–æ—Å—Ç–∏', type: 'text', position: 2, unreadCount: 5 }
          ]
        },
        {
          id: generateId(),
          name: '–†–ê–ó–†–ê–ë–û–¢–ö–ê',
          channels: [
            { id: generateId(), name: '–æ–±—â–∏–π', type: 'text', position: 0, unreadCount: 12 },
            { id: generateId(), name: '–∫–æ–¥-—Ä–µ–≤—å—é', type: 'text', position: 1 },
            { id: generateId(), name: '–±–∞–≥–∏', type: 'text', position: 2, unreadCount: 3 },
            { id: generateId(), name: '—Ñ–∏—á–∏', type: 'text', position: 3 }
          ]
        },
        {
          id: generateId(),
          name: '–ì–û–õ–û–°–û–í–´–ï',
          channels: [
            { id: generateId(), name: '–æ–±—â–µ–Ω–∏–µ', type: 'voice', position: 0 },
            { id: generateId(), name: '—Å–æ–∑–≤–æ–Ω—ã', type: 'voice', position: 1 },
            { id: generateId(), name: '—Å—Ç—Ä–∏–º—ã', type: 'voice', position: 2 }
          ]
        }
      ]
    },
    {
      id: generateId(),
      name: '–î–∏–∑–∞–π–Ω –ö–æ–º—å—é–Ω–∏—Ç–∏',
      icon: 'üé®',
      ownerId: users[2].id,
      memberCount: 12,
      members: users.slice(5, 17),
      roles: [
        { id: generateId(), name: '–õ–∏–¥', color: '#purple', permissions: ['lead'] },
        { id: generateId(), name: '–î–∏–∑–∞–π–Ω–µ—Ä', color: '#pink', permissions: ['design'] }
      ],
      categories: [
        {
          id: generateId(),
          name: '–î–ò–ó–ê–ô–ù',
          channels: [
            { id: generateId(), name: '–æ–±—â–∏–π', type: 'text', position: 0 },
            { id: generateId(), name: 'ui-kit', type: 'text', position: 1, unreadCount: 1 },
            { id: generateId(), name: '–º–∞–∫–µ—Ç—ã', type: 'text', position: 2 },
            { id: generateId(), name: '–∏–∫–æ–Ω–∫–∏', type: 'text', position: 3 }
          ]
        },
        {
          id: generateId(),
          name: '–û–ë–†–ê–¢–ù–ê–Ø –°–í–Ø–ó–¨',
          channels: [
            { id: generateId(), name: '—Ñ–∏–¥–±–µ–∫', type: 'text', position: 0 },
            { id: generateId(), name: '–∏–¥–µ–∏', type: 'text', position: 1, unreadCount: 7 }
          ]
        }
      ]
    },
    {
      id: generateId(),
      name: '–ì–µ–π–º–µ—Ä—ã',
      icon: 'üéÆ',
      ownerId: users[3].id,
      memberCount: 20,
      members: users.slice(10, 25),
      roles: [
        { id: generateId(), name: '–ü—Ä–æ-–≥–µ–π–º–µ—Ä', color: '#gold', permissions: ['pro'] },
        { id: generateId(), name: '–°—Ç—Ä–∏–º–µ—Ä', color: '#purple', permissions: ['stream'] }
      ],
      categories: [
        {
          id: generateId(),
          name: '–ò–ì–†–´',
          channels: [
            { id: generateId(), name: '–æ–±—â–∏–π', type: 'text', position: 0, unreadCount: 25 },
            { id: generateId(), name: '–ø–æ–∏—Å–∫-–∫–æ–º–∞–Ω–¥—ã', type: 'text', position: 1, unreadCount: 8 },
            { id: generateId(), name: '—Å—Ç—Ä–∏–º—ã', type: 'text', position: 2 }
          ]
        },
        {
          id: generateId(),
          name: '–ì–û–õ–û–°–û–í–´–ï',
          channels: [
            { id: generateId(), name: '–∏–≥—Ä—ã', type: 'voice', position: 0 },
            { id: generateId(), name: '—á–∏–ª–ª', type: 'voice', position: 1 }
          ]
        }
      ]
    }
  ];

  // Generate messages for all channels
  const messages: Record<string, Message[]> = {};
  servers.forEach(server => {
    server.categories.forEach(category => {
      category.channels.forEach(channel => {
        if (channel.type === 'text') {
          messages[channel.id] = generateMessages(channel.id, server.members);
        }
      });
    });
  });

  // Generate direct messages
  const directMessages: DirectMessage[] = [
    { id: generateId(), participants: [currentUser.id, users[1].id], unreadCount: 3 },
    { id: generateId(), participants: [currentUser.id, users[2].id] },
    { id: generateId(), participants: [currentUser.id, users[3].id, users[4].id], unreadCount: 1 }
  ];

  // Generate messages for DMs
  directMessages.forEach(dm => {
    const participants = users.filter(u => dm.participants.includes(u.id));
    messages[dm.id] = generateMessages(dm.id, participants, 15);
  });

  return {
    currentUser,
    servers,
    friends: users.slice(1, 8),
    directMessages,
    messages
  };
}